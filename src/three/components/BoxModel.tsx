/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useBox, useConvexPolyhedron } from '@react-three/cannon';
import { Geometry } from "three-stdlib";

function toConvexProps(bufferGeometry: any) {
  const geo = new Geometry().fromBufferGeometry(bufferGeometry);
  geo.mergeVertices();
  return [geo.vertices.map((v) => [v.x, v.y, v.z]), geo.faces.map((f) => [f.a, f.b, f.c]), []];
}

export const BoxModel: React.FunctionComponent = ({ ...props }) => {


  // const group = useRef()
  const { nodes, materials } = useGLTF('/assets/models/boxModel2.gltf');

  const geo = React.useMemo(() => toConvexProps((nodes.Cube as any).geometry), [nodes]);
  const [ref] = useConvexPolyhedron(() => ({ type: 'Static', mass: 1, ...props, args: geo as any, scale: -7.56 }));


  return (
    // <group ref={group} {...props} dispose={null}>
    // <mesh
    //   ref={ref}
    //   castShadow
    //   receiveShadow
    //   geometry={(nodes.Cube as any).geometry}
    //   material={materials.Material}
    //   position={[0, 7.36, 0]}
    //   scale={-7.56}>
    // </mesh>
    // </group>

    <mesh
      ref={ref}
      castShadow
      receiveShadow
      geometry={(nodes.Cube as any).geometry}
      material={materials.Material}
      scale={-7.56}
      {...props}
    >
      {/* <meshStandardMaterial wireframe color="white" /> */}
    </mesh>
  )
}
useGLTF.preload('/assets/models/boxModel2.gltf')


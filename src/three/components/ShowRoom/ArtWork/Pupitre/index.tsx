/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {}
}

export default function Pupitre({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/assets/models/pupitre.gltf') as GLTFResult
  (nodes.Cube.material as any).color = { r: 1, g: 1, b: 1 };
  (nodes.Cube.material as any).metalness = 2;
  // (nodes.Cube.material as any).emissive = { r: 0, g: 0, b: 0 }

  return (
    <group ref={group} {...props} dispose={null}>
      <mesh receiveShadow castShadow geometry={nodes.Cube.geometry} material={nodes.Cube.material} position={[0, 0.75, 0]} scale={[0.25, 0.75, 0.25]} />
    </group>
  )
}

useGLTF.preload('/assets/models/pupitre.gltf')

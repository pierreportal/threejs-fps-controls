/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useTexturizer } from '../../../../hooks/useTexturizer'
import { useInterval } from '../../../../hooks/useInterval'

type GLTFResult = GLTF & {
  nodes: {
    Cube: THREE.Mesh
  }
  materials: {}
}

export default function SculpTest({ ...props }: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/assets/models/sculpTest.gltf') as GLTFResult

  (nodes.Cube.material as any).color = { r: 10, g: 10, b: 10 };

  const loadedTexture = useTexturizer('coralGreen', [1, 1]);

  Object.keys(loadedTexture).forEach((key: any) => {

    (nodes.Cube.material as any)[key] = (loadedTexture as any)[key]
  });

  (nodes.Cube.material as any).displacementMap = 0;

  const [r, setR] = React.useState(0);

  useInterval(() => {
    setR(() => r + 0.001)
  }, 10);

  return (
    <group  {...props} dispose={null}>
      <mesh rotation={[0, r, 0]} castShadow receiveShadow geometry={nodes.Cube.geometry} material={nodes.Cube.material} position={[0, 0.75, 0]} scale={[0.25, 0.75, 0.25]} />
    </group>
  )
}

useGLTF.preload('/assets/models/sculpTest.gltf')
